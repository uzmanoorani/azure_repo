trigger:
  branches:
    include:
    - main
  paths:
    include:
    - k8s-manifests/*

variables:
  azureSubscription: 'your-azure-service-connection'
  aksResourceGroup: 'your-aks-resource-group'
  aksClusterName: 'your-aks-cluster-name'

stages:
- stage: Deploy
  displayName: 'Deploy WordPress to AKS'
  jobs:
  - deployment: DeployWordPress
    displayName: 'Deploy WordPress and MySQL'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'Get AKS Credentials'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az aks get-credentials --resource-group $(aksResourceGroup) --name $(aksClusterName) --overwrite-existing
          
          - task: KubernetesManifest@1
            displayName: 'Create Namespace'
            inputs:
              action: 'deploy'
              manifests: 'k8s-manifests/namespace.yaml'
          
          - task: KubernetesManifest@1
            displayName: 'Deploy MySQL Secret'
            inputs:
              action: 'deploy'
              manifests: 'k8s-manifests/mysql-secret.yaml'
          
          - task: KubernetesManifest@1
            displayName: 'Deploy MySQL PVC'
            inputs:
              action: 'deploy'
              manifests: 'k8s-manifests/mysql-pvc.yaml'
          
          - task: KubernetesManifest@1
            displayName: 'Deploy MySQL'
            inputs:
              action: 'deploy'
              manifests: |
                k8s-manifests/mysql-deployment.yaml
                k8s-manifests/mysql-service.yaml
          
          - task: Bash@3
            displayName: 'Wait for MySQL to be Ready'
            inputs:
              targetType: 'inline'
              script: |
                echo "Waiting for MySQL to be ready..."
                kubectl wait --for=condition=ready pod -l app=mysql -n wordpress --timeout=300s
          
          - task: KubernetesManifest@1
            displayName: 'Deploy WordPress PVC'
            inputs:
              action: 'deploy'
              manifests: 'k8s-manifests/wordpress-pvc.yaml'
          
          - task: KubernetesManifest@1
            displayName: 'Deploy WordPress'
            inputs:
              action: 'deploy'
              manifests: |
                k8s-manifests/wordpress-deployment.yaml
                k8s-manifests/wordpress-service.yaml
          
          - task: Bash@3
            displayName: 'Get WordPress External IP'
            inputs:
              targetType: 'inline'
              script: |
                echo "Waiting for WordPress LoadBalancer IP..."
                sleep 60
                EXTERNAL_IP=$(kubectl get service wordpress -n wordpress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
                echo "WordPress will be available at: http://$EXTERNAL_IP"
                echo "##vso[task.setvariable variable=WordPressIP]$EXTERNAL_IP"
          
          - task: Bash@3
            displayName: 'Display Deployment Status'
            inputs:
              targetType: 'inline'
              script: |
                echo "=== Deployment Status ==="
                kubectl get pods -n wordpress
                kubectl get services -n wordpress
                kubectl get pvc -n wordpress
                echo "WordPress URL: http://$(WordPressIP)"