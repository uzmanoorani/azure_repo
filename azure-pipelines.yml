# Azure DevOps Pipeline for WordPress deployment to AKS (Build Pipeline Only)
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - kubernetes-manifests/*
    - azure-pipelines.yml

variables:
  # Service connections
  azureServiceConnection: 'Test-AzureRM-Connection'
  kubernetesServiceConnection: 'aks-kubernetes-svc'
  # AKS cluster details
  aksClusterName: 'ar-aks-cluster'
  resourceGroupName: 'dg_azure_workload'
  kubernetesNamespace: 'wordpress'


pool:
  name: Default

stages:
- stage: Validate
  displayName: 'Validate Kubernetes Manifests'
  jobs:
  - job: ValidateManifests
    displayName: 'Validate YAML Files'
    steps:
    - task: Bash@3
      displayName: 'Validate YAML Syntax'
      inputs:
        targetType: 'inline'
        script: |
          echo "Validating YAML files..."
          for file in kubernetes-manifests/*.yaml; do
            if [ -f "$file" ]; then
              echo "Validating $file"
            fi
          done
          echo "All YAML files are valid!"

- stage: Deploy
  displayName: 'Deploy WordPress to AKS'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - job: DeployWordPress
    displayName: 'Deploy WordPress Application'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Setup AKS Connection'
      inputs:
        azureSubscription: 'Test-AzureRM-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials..."
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
          
          echo "Verifying cluster connection..."
          kubectl cluster-info
          
          echo "Checking cluster nodes..."
          kubectl get nodes
          
          echo "Creating namespace if it doesn't exist..."
          kubectl create namespace $(kubernetesNamespace) --dry-run=client -o yaml | kubectl apply -f -

    - task: KubernetesManifest@0
      displayName: 'Deploy MySQL Database'
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: '$(kubernetesServiceConnection)'
        namespace: '$(kubernetesNamespace)'
        manifests: |
          kubernetes-manifests/mysql.yaml

    - task: Bash@3
      displayName: 'Wait for MySQL to be Ready'
      inputs:
        targetType: 'inline'
        script: |
          echo "Waiting for MySQL deployment to be ready..."
          kubectl wait --for=condition=available --timeout=600s deployment/mysql -n $(kubernetesNamespace)
          
          echo "Checking MySQL pod status..."
          kubectl get pods -n $(kubernetesNamespace) -l app=mysql
          
          echo "MySQL is ready!"

    - task: KubernetesManifest@0
      displayName: 'Deploy WordPress Application'
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: '$(kubernetesServiceConnection)'
        namespace: '$(kubernetesNamespace)'
        manifests: |
          kubernetes-manifests/wordpress.yaml

    - task: Bash@3
      displayName: 'Wait for WordPress to be Ready'
      inputs:
        targetType: 'inline'
        script: |
          echo "Waiting for WordPress deployment to be ready..."
          kubectl wait --for=condition=available --timeout=600s deployment/wordpress -n $(kubernetesNamespace)
          
          echo "Checking WordPress pod status..."
          kubectl get pods -n $(kubernetesNamespace) -l app=wordpress
          
          echo "WordPress is ready!"

    - task: Bash@3
      displayName: 'Get Application Access Information'
      inputs:
        targetType: 'inline'
        script: |
          echo "=== WordPress Deployment Summary ==="
          echo "Namespace: $(kubernetesNamespace)"
          echo "Cluster: $(aksClusterName)"
          echo "Resource Group: $(resourceGroupName)"
          echo ""
          
          echo "=== Deployments Status ==="
          kubectl get deployments -n $(kubernetesNamespace) -o wide
          echo ""
          
          echo "=== Services ==="
          kubectl get services -n $(kubernetesNamespace) -o wide
          echo ""
          
          echo "=== Pods ==="
          kubectl get pods -n $(kubernetesNamespace) -o wide
          echo ""
          
          echo "=== Storage ==="
          kubectl get pvc -n $(kubernetesNamespace)
          echo ""
          
          # Check if WordPress service is LoadBalancer and get external IP
          SERVICE_TYPE=$(kubectl get service wordpress -n $(kubernetesNamespace) -o jsonpath='{.spec.type}' 2>/dev/null || echo "NotFound")
          
          if [ "$SERVICE_TYPE" = "LoadBalancer" ]; then
            echo "=== WordPress External Access ==="
            echo "Service Type: LoadBalancer"
            echo "Getting external IP address..."
            
            # Wait for external IP (up to 5 minutes)
            for i in {1..30}; do
              EXTERNAL_IP=$(kubectl get service wordpress -n $(kubernetesNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
              if [ -n "$EXTERNAL_IP" ] && [ "$EXTERNAL_IP" != "null" ]; then
                echo "✅ WordPress is accessible at: http://$EXTERNAL_IP"
                echo "✅ WordPress Admin: http://$EXTERNAL_IP/wp-admin"
                break
              else
                echo "⏳ Waiting for external IP... (attempt $i/30)"
                sleep 10
              fi
            done
            
            if [ -z "$EXTERNAL_IP" ] || [ "$EXTERNAL_IP" = "null" ]; then
              echo "⚠️  External IP not assigned yet. Check later with:"
              echo "kubectl get service wordpress -n $(kubernetesNamespace)"
            fi
          elif [ "$SERVICE_TYPE" = "NodePort" ]; then
            NODE_PORT=$(kubectl get service wordpress -n $(kubernetesNamespace) -o jsonpath='{.spec.ports[0].nodePort}')
            echo "=== WordPress Access (NodePort) ==="
            echo "Service Type: NodePort"
            echo "Port: $NODE_PORT"
            echo "Access via any cluster node IP on port $NODE_PORT"
          else
            echo "=== WordPress Access ==="
            echo "Service Type: $SERVICE_TYPE"
            echo "Use kubectl port-forward for local access:"
            echo "kubectl port-forward service/wordpress 8080:80 -n $(kubernetesNamespace)"
          fi

- stage: HealthCheck
  displayName: 'Post-Deployment Health Check'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: HealthCheck
    displayName: 'Verify Application Health'
    steps:
    - task: AzureCLI@2
      displayName: 'Run Comprehensive Health Checks'
      inputs:
        azureSubscription: 'Test-AzureRM-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials for health check..."
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
          
          echo "=== Comprehensive Health Check ==="
          
          # Check namespace
          if kubectl get namespace $(kubernetesNamespace) >/dev/null 2>&1; then
            echo "✅ Namespace '$(kubernetesNamespace)' exists"
          else
            echo "❌ Namespace '$(kubernetesNamespace)' not found"
            exit 1
          fi
          
          # Check MySQL deployment health
          MYSQL_READY=$(kubectl get deployment mysql -n $(kubernetesNamespace) -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
          MYSQL_DESIRED=$(kubectl get deployment mysql -n $(kubernetesNamespace) -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
          
          if [ "$MYSQL_READY" = "$MYSQL_DESIRED" ] && [ "$MYSQL_READY" != "0" ]; then
            echo "✅ MySQL deployment is healthy ($MYSQL_READY/$MYSQL_DESIRED replicas ready)"
          else
            echo "❌ MySQL deployment is unhealthy ($MYSQL_READY/$MYSQL_DESIRED replicas ready)"
            kubectl describe deployment mysql -n $(kubernetesNamespace)
          fi
          
          # Check WordPress deployment health
          WP_READY=$(kubectl get deployment wordpress -n $(kubernetesNamespace) -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
          WP_DESIRED=$(kubectl get deployment wordpress -n $(kubernetesNamespace) -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
          
          if [ "$WP_READY" = "$WP_DESIRED" ] && [ "$WP_READY" != "0" ]; then
            echo "✅ WordPress deployment is healthy ($WP_READY/$WP_DESIRED replicas ready)"
          else
            echo "❌ WordPress deployment is unhealthy ($WP_READY/$WP_DESIRED replicas ready)"
            kubectl describe deployment wordpress -n $(kubernetesNamespace)
          fi
          
          # Check services
          if kubectl get service mysql -n $(kubernetesNamespace) >/dev/null 2>&1; then
            echo "✅ MySQL service exists and is accessible"
          else
            echo "❌ MySQL service not found"
          fi
          
          if kubectl get service wordpress -n $(kubernetesNamespace) >/dev/null 2>&1; then
            echo "✅ WordPress service exists and is accessible"
          else
            echo "❌ WordPress service not found"
          fi
          
          # Check persistent volumes
          PVC_STATUS=$(kubectl get pvc -n $(kubernetesNamespace) -o jsonpath='{.items[*].status.phase}' 2>/dev/null || echo "")
          if echo "$PVC_STATUS" | grep -q "Bound"; then
            echo "✅ Persistent volumes are bound"
          else
            echo "⚠️  Check persistent volume status:"
            kubectl get pvc -n $(kubernetesNamespace)
          fi
          
          echo ""
          echo "=== Final Deployment Status ==="
          kubectl get all -n $(kubernetesNamespace)
          
          echo ""
          echo "=== Deployment Complete ==="
          echo "WordPress application has been successfully deployed to AKS!"
          echo "Monitor the application using: kubectl get all -n $(kubernetesNamespace)"
          