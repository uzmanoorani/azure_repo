# Azure DevOps Pipeline for WordPress deployment to AKS
trigger:
  branches:
    include:
    - main
  paths:
    include:
    - kubernetes-manifests/*
    - azure-pipelines.yml

variables:
  # Azure Resource Manager connection name
  azureServiceConnection: 'Test-AzureRM-Connection'
  # Kubernetes service connection name
  kubernetesServiceConnection: 'my-svc'
  # AKS cluster details

  aksClusterName: 'ar-aks-cluster'
  resourceGroupName: 'Scaleops-ResourceGroup'
  # Kubernetes namespace - FIXED: Uncommented this variable
  kubernetesNamespace: 'wordpress'
  # Azure subscription - FIXED: Use the same as azureServiceConnection
  azureSubscription: 'Test-AzureRM-Connection'
pool:
  name: Default


stages:
- stage: Validate
  displayName: 'Validate Kubernetes Manifests'
  jobs:
  - job: ValidateManifests
    displayName: 'Validate YAML Files'
    steps:
    - task: Bash@3
      displayName: 'Validate YAML Syntax'
      inputs:
        targetType: 'inline'
        script: |
          echo "Validating YAML files..."
          for file in kubernetes-manifests/*.yaml; do
            echo "Validating $file"
            python -c "import yaml; yaml.safe_load(open('$file'))"
          done
          echo "All YAML files are valid!"


- stage: Deploy
  displayName: 'Deploy to AKS'
  dependsOn: Validate
  condition: succeeded()
  jobs:
  - deployment: DeployWordPress
    displayName: 'Deploy WordPress to AKS'
    # environment: 'AKS-Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          
          - task: AzureCLI@2
            displayName: 'Get AKS Credentials'
            inputs:
              azureSubscription: 'Test-AzureRM-Connection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Getting AKS credentials..."
                az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
                
                echo "Verifying cluster connection..."
                kubectl cluster-info
                
                echo "Checking cluster nodes..."
                kubectl get nodes

          - task: KubernetesManifest@0
            displayName: 'Create/Update Namespace'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(kubernetesNamespace)'
              manifests: |
                kubernetes-manifests/namespace.yaml

          - task: KubernetesManifest@0
            displayName: 'Deploy MySQL'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(kubernetesNamespace)'
              manifests: |
                kubernetes-manifests/mysql.yaml

          - task: Bash@3
            displayName: 'Wait for MySQL to be Ready'
            inputs:
              targetType: 'inline'
              script: |
                echo "Waiting for MySQL deployment to be ready..."
                kubectl wait --for=condition=available --timeout=300s deployment/mysql -n $(kubernetesNamespace) || true
                
                echo "Checking MySQL pod status..."
                kubectl get pods -n $(kubernetesNamespace) -l app=mysql

          - task: KubernetesManifest@0
            displayName: 'Deploy WordPress'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: '$(kubernetesServiceConnection)'
              namespace: '$(kubernetesNamespace)'
              manifests: |
                kubernetes-manifests/wordpress.yaml

          - task: Bash@3
            displayName: 'Wait for WordPress to be Ready'
            inputs:
              targetType: 'inline'
              script: |
                echo "Waiting for WordPress deployment to be ready..."
                kubectl wait --for=condition=available --timeout=300s deployment/wordpress -n $(kubernetesNamespace) || true
                
                echo "Checking WordPress pod status..."
                kubectl get pods -n $(kubernetesNamespace) -l app=wordpress

          - task: Bash@3
            displayName: 'Get Deployment Status'
            inputs:
              targetType: 'inline'
              script: |
                echo "=== Deployment Summary ==="
                echo "Namespace: $(kubernetesNamespace)"
                echo ""
                
                echo "=== Deployments ==="
                kubectl get deployments -n $(kubernetesNamespace)
                echo ""
                
                echo "=== Services ==="
                kubectl get services -n $(kubernetesNamespace)
                echo ""
                
                echo "=== Pods ==="
                kubectl get pods -n $(kubernetesNamespace)
                echo ""
                
                echo "=== Persistent Volumes ==="
                kubectl get pv
                echo ""
                
                echo "=== Persistent Volume Claims ==="
                kubectl get pvc -n $(kubernetesNamespace)
                echo ""
                
                # Get external IP if WordPress service is LoadBalancer type
                WORDPRESS_SERVICE=$(kubectl get service wordpress -n $(kubernetesNamespace) -o jsonpath='{.spec.type}' 2>/dev/null || echo "NotFound")
                if [ "$WORDPRESS_SERVICE" = "LoadBalancer" ]; then
                  echo "=== WordPress External Access ==="
                  echo "Waiting for external IP..."
                  kubectl get service wordpress -n $(kubernetesNamespace) --watch-only=false
                  
                  EXTERNAL_IP=$(kubectl get service wordpress -n $(kubernetesNamespace) -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "Pending")
                  if [ "$EXTERNAL_IP" != "Pending" ] && [ "$EXTERNAL_IP" != "" ]; then
                    echo "WordPress is accessible at: http://$EXTERNAL_IP"
                  else
                    echo "External IP is still pending. Check status with: kubectl get service wordpress -n $(kubernetesNamespace)"
                  fi
                fi

- stage: HealthCheck
  displayName: 'Health Check'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: HealthCheck
    displayName: 'Verify Deployment Health'
    steps:
    - task: AzureCLI@2
      displayName: 'Run Health Checks'
      inputs:
        azureSubscription: 'Test-AzureRM-Connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "Getting AKS credentials for health check..."
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
          
          echo "=== Health Check Results ==="
          
          # Check if namespace exists
          if kubectl get namespace $(kubernetesNamespace) >/dev/null 2>&1; then
            echo "✅ Namespace '$(kubernetesNamespace)' exists"
          else
            echo "❌ Namespace '$(kubernetesNamespace)' not found"
            exit 1
          fi
          
          # Check MySQL deployment
          MYSQL_READY=$(kubectl get deployment mysql -n $(kubernetesNamespace) -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
          MYSQL_DESIRED=$(kubectl get deployment mysql -n $(kubernetesNamespace) -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
          
          if [ "$MYSQL_READY" = "$MYSQL_DESIRED" ] && [ "$MYSQL_READY" != "0" ]; then
            echo "✅ MySQL deployment is healthy ($MYSQL_READY/$MYSQL_DESIRED replicas ready)"
          else
            echo "❌ MySQL deployment is unhealthy ($MYSQL_READY/$MYSQL_DESIRED replicas ready)"
          fi
          
          # Check WordPress deployment
          WP_READY=$(kubectl get deployment wordpress -n $(kubernetesNamespace) -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0")
          WP_DESIRED=$(kubectl get deployment wordpress -n $(kubernetesNamespace) -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
          
          if [ "$WP_READY" = "$WP_DESIRED" ] && [ "$WP_READY" != "0" ]; then
            echo "✅ WordPress deployment is healthy ($WP_READY/$WP_DESIRED replicas ready)"
          else
            echo "❌ WordPress deployment is unhealthy ($WP_READY/$WP_DESIRED replicas ready)"
          fi
          
          # Check services
          if kubectl get service mysql -n $(kubernetesNamespace) >/dev/null 2>&1; then
            echo "✅ MySQL service exists"
          else
            echo "❌ MySQL service not found"
          fi
          
          if kubectl get service wordpress -n $(kubernetesNamespace) >/dev/null 2>&1; then
            echo "✅ WordPress service exists"
          else
            echo "❌ WordPress service not found"
          fi
          
          echo ""
          echo "=== Final Status ==="
          kubectl get all -n $(kubernetesNamespace)